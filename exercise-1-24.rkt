#lang racket

(define (divides? a b) (= (remainder b a) 0))
(define (square n) (* n n))
(define (runtime) (current-inexact-milliseconds))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (expmod base (- exp 1) m)) m))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))
(define (fast-prime_repeat n times repeat)
  (cond ((= repeat 1) (fast-prime? n times))
        (else (if (fast-prime? n times)
                  (fast-prime_repeat n times (- repeat 1))
                  (fast-prime_repeat n times (- repeat 1))))))

(define (timed-prime-test n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (fast-prime_repeat n 15 1000)
      (report-prime n (- (runtime) start-time)) false))
(define (report-prime n elapsed-time)
  (newline)
  (display n)
  (display " *** ")
  (display elapsed-time)
  true)

(define (search-for-primes start count)
  (if (= count 0) 1 
      (search-for-primes 
       (+ 1 start) 
       (- count (if (timed-prime-test start) 1 0)))))

(search-for-primes 1000000 3)
(search-for-primes 2000000 3)
(search-for-primes 4000000 3)
(search-for-primes 8000000 3)
(search-for-primes 16000000 3)
(search-for-primes 32000000 3)